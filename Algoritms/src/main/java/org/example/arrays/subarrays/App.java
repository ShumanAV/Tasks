package org.example.arrays.subarrays;

/*
Задача: дается массив и число, необходимо найти и вернуть количество всех подмассивов в этом массиве, сумма которых
равна числу
 */

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class App {
    public static void main(String[] args) {
        int[] arr = {4, 2, 2, 1, 2, -3, 5, -8};
        int k = 5;// 4, 6, 8, 9, 11, 8, 13, 5
        System.out.println("Число подмассивов: " + returnAllSubArraysClassical(arr, k));
        System.out.println("Число подмассивов: " + returnAllSubArraysHashSet(arr, k));
        System.out.println("Число подмассивов: " + returnAllSubArraysHashMap(arr, k));
    }

    // Сложность O(n), дополнительно тратим память O(n), т.к. сумму этих значений добавим в мапу
    // Решение, создаем мапу, в которую кладем сумму, и в ней же ищем остаток от разницы между числом, которое нужно
    // получить и текущим числом, если такой остаток есть в мапе, значит на каком-то этапе есть одно или несколько чисел
    // чья сумма равна этому остатку, а значит если его откинуть остальные цифры дадут необходимую сумму этой цифры,
    // в этом случае увеличиваем ответ, также когда добавляем сумму, если такая сумма уже есть в мапе, просто увеличиваем
    // значение для этой суммы в мапе на 1, потом когда нам потребуется такой остаток, где значение уже например 2,
    // ответ увеличиваем на 2, также сразу после создания мапы добавляем сумму 0 на случай когда сумма будет равна цифре
    private static int returnAllSubArraysHashMap(int[] arr, int k) {
        int answer = 0, sum = 0;
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];

            if (map.containsKey(sum)) {
                map.put(sum, map.get(sum) + 1);
            } else {
                map.put(sum, 1);
            }

            if (map.containsKey(sum - k)) {
                answer += map.get(sum - k);
            }
        }
        return answer;
    }

    // Сложность O(n), дополнительно тратим память O(n), т.к. сумму этих значений добавим в множество
    // Решение, создаем множество, в которое кладем сумму, и в ней же ищем остаток от разницы между числом, которое нужно
    // получить и текущим числом, если такой остаток есть в множестве, значит на каком-то этапе есть одно или несколько чисел
    // чья сумма равна этому остатку, а значит если его откинуть остальные цифры дадут необходимую сумму этой цифры,
    // в этом случае увеличиваем ответ на 1, также сразу после создания множества добавляем сумму 0 на случай когда
    // сумма чисел будет равна необходимой цифре, т.к. в отличие от решения выше с мапой, в данном случае не сохраняется
    // количество сумм в значение, поэтому добавляем условие если элемент равен цифре. В данном случае множеством
    // закрываем все ситуации когда сумма чисел равна цифре, но не закрываем когда просто число равно цифре,
    // как отдельный подмассив, поэтому делаем доп условие на равенство элемента этой цифре
    private static int returnAllSubArraysHashSet(int[] arr, int k) {
        int answer = 0, sum = 0;
        Set<Integer> set = new HashSet<>();
        set.add(0);
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
            set.add(sum);   // 4, 6, 8, 9, 11, 8, 13, 5
            if (set.contains(sum - k)) {
                answer++;
            }
            if (arr[i] == k) {
                answer++;
            }
        }
        return answer;
    }

    // Сложность O(n2)
    // Решение №1, в цикле проходимся по границам, делаем две границы левая и правая, левая меняется от начала массива
    // до конца, а правая не меняется, она всегда равна последнему элементу массива, вторым циклом суммируем все элементы
    // между этими границами и если сумма равна этой цифре увеличиваем ответ
    private static int returnAllSubArraysClassical(int[] arr, int k) {
        int answer = 0;
        for (int i = 0; i < arr.length; i++) {
            int sum = 0;
            for (int j = i; j < arr.length; j++) {
                sum += arr[j];
                if (sum == k) {
                    answer++;
                }
            }
        }
        return answer;
    }
}
